{
    "probability_two_random_records_match": 3e-8,
    "link_type": "link_only",
    "blocking_rules_to_generate_predictions": [
        "l.numeric_token_1 = r.numeric_token_1 and list_extract(l.unusual_tokens_arr, 1) = list_extract(r.unusual_tokens_arr, 1) and list_extract(l.unusual_tokens_arr, 2) = list_extract(r.unusual_tokens_arr, 2) and split_part(l.postcode, ' ', 1) = split_part(r.postcode, ' ', 1)",
        "l.numeric_token_1 = r.numeric_token_2 and list_extract(l.unusual_tokens_arr, 1) = list_extract(r.unusual_tokens_arr, 1) and split_part(l.postcode, ' ', 1) = split_part(r.postcode, ' ', 1)",
        "l.numeric_token_1 = r.numeric_token_2 and list_extract(l.unusual_tokens_arr, 1) = list_extract(r.unusual_tokens_arr, 1) and split_part(l.postcode, ' ', 2) = split_part(r.postcode, ' ', 2)",
        "l.numeric_token_1 = r.numeric_token_1 and list_extract(l.unusual_tokens_arr, 1) = list_extract(r.unusual_tokens_arr, 2) and list_extract(l.unusual_tokens_arr, 2) = list_extract(r.unusual_tokens_arr, 1) and split_part(l.postcode, ' ', 1) = split_part(r.postcode, ' ', 1)",
        "l.numeric_token_1 = r.numeric_token_1 and list_extract(l.unusual_tokens_arr, 1) = list_extract(r.unusual_tokens_arr, 2) and split_part(l.postcode, ' ', 2) = split_part(r.postcode, ' ', 2)",
        "l.numeric_token_1 = r.numeric_token_1 and l.postcode = r.postcode",
        "l.numeric_token_1 = r.numeric_token_2 and l.postcode = r.postcode",
        "list_extract(l.unusual_tokens_arr, 1) = list_extract(r.unusual_tokens_arr, 2) and l.postcode = r.postcode",
        "list_extract(l.very_unusual_tokens_arr, 1) = list_extract(r.very_unusual_tokens_arr, 1) and l.numeric_token_1 = r.numeric_token_1",
        "list_extract(l.very_unusual_tokens_arr, 1) = list_extract(r.very_unusual_tokens_arr, 2) and l.numeric_token_1 = r.numeric_token_1",
        "l.numeric_token_2 = r.numeric_token_2 and list_extract(l.unusual_tokens_arr, 1) = list_extract(r.unusual_tokens_arr, 1) and split_part(l.postcode, ' ', 1) = split_part(r.postcode, ' ', 1)",
        "l.numeric_token_1 = r.numeric_token_1 and list_extract(l.unusual_tokens_arr, 1) = list_extract(r.unusual_tokens_arr, 1) and split_part(l.postcode, ' ', 2) = split_part(r.postcode, ' ', 2)",
        "l.numeric_token_2 = r.numeric_token_2 and list_extract(l.unusual_tokens_arr, 1) = list_extract(r.unusual_tokens_arr, 1) and split_part(l.postcode, ' ', 2) = split_part(r.postcode, ' ', 2)",
        "l.numeric_token_2 = r.numeric_token_2 and l.postcode = r.postcode",
        "l.numeric_token_1 = r.numeric_1_alt and l.postcode = r.postcode",
        "l.numeric_1_alt = r.numeric_token_1 and l.postcode = r.postcode",
        "l.numeric_token_1 = r.numeric_1_alt and l.numeric_token_2 = r.numeric_token_2 and split_part(l.postcode, ' ', 1) = split_part(r.postcode, ' ', 1)",
        "l.numeric_1_alt = r.numeric_token_1 and l.numeric_token_2 = r.numeric_token_2 and split_part(l.postcode, ' ', 1) = split_part(r.postcode, ' ', 1)",
        "l.numeric_token_1 = r.numeric_1_alt and l.numeric_token_2 = r.numeric_token_2 and split_part(l.postcode, ' ', 2) = split_part(r.postcode, ' ', 2)",
        "l.numeric_1_alt = r.numeric_token_1 and l.numeric_token_2 = r.numeric_token_2 and split_part(l.postcode, ' ', 2) = split_part(r.postcode, ' ', 2)",
        "l.numeric_token_1 = r.numeric_token_1 and l.numeric_token_2 = r.numeric_token_2 and split_part(l.postcode, ' ', 1) = split_part(r.postcode, ' ', 1)",
        "l.numeric_token_1 = r.numeric_token_1 and l.numeric_token_2 = r.numeric_token_2 and split_part(l.postcode, ' ', 2) = split_part(r.postcode, ' ', 2)",
        "list_extract(l.extremely_unusual_tokens_arr, 1) = list_extract(r.extremely_unusual_tokens_arr, 1) and split_part(l.postcode, ' ', 1) = split_part(r.postcode, ' ', 1)",
        "list_extract(l.extremely_unusual_tokens_arr, 1) = list_extract(r.extremely_unusual_tokens_arr, 1) and split_part(l.postcode, ' ', 2) = split_part(r.postcode, ' ', 2)",
        {
            "blocking_rule": "l.postcode = r.postcode",
            "salting_partitions": 10
        }
    ],
    "comparisons": [
        {
            "output_column_name": "flat_positional",
            "comparison_levels": [
                {
                    "sql_condition": "\"flat_positional_l\" IS NULL AND \"flat_positional_r\" IS NULL",
                    "label_for_charts": "Null",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"flat_positional_l\" = \"flat_positional_r\"",
                    "label_for_charts": "Exact match",
                    "m_probability": 0.95,
                    "u_probability": 0.01
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 1,
                    "u_probability": 32
                }
            ],
            "comparison_description": "numeric_token_1"
        },
        {
            "output_column_name": "numeric_token_1",
            "comparison_levels": [
                {
                    "sql_condition": "\"numeric_token_1_l\" IS NULL OR \"numeric_token_1_r\" IS NULL",
                    "label_for_charts": "Null",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"numeric_token_1_l\" = \"numeric_token_1_r\"",
                    "label_for_charts": "Exact match",
                    "m_probability": 0.95,
                    "u_probability": 0.01,
                    "tf_adjustment_column": "numeric_token_1"
                },
                {
                    "sql_condition": "\"numeric_1_alt_l\" = \"numeric_token_1_r\" OR \"numeric_token_1_l\" = \"numeric_1_alt_r\" OR \"numeric_1_alt_l\" = \"numeric_1_alt_r\"",
                    "label_for_charts": "Exact match on alt numeric token",
                    "m_probability": 0.9,
                    "u_probability": 0.01,
                    "tf_adjustment_column": "numeric_token_1",
                    "tf_adjustment_weight": 0.5
                },
                {
                    "sql_condition": "\"numeric_token_2_l\" = \"numeric_token_1_r\"",
                    "label_for_charts": "Exact match inverted numbers",
                    "m_probability": 3,
                    "u_probability": 1
                },
                {
                    "sql_condition": "\"numeric_token_1_l\" IS NULL OR \"numeric_token_1_r\" IS NULL",
                    "label_for_charts": "Null",
                    "m_probability": 1,
                    "u_probability": 16
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 1,
                    "u_probability": 256
                }
            ],
            "comparison_description": "numeric_token_1"
        },
        {
            "output_column_name": "numeric_token_2",
            "comparison_levels": [
                {
                    "sql_condition": "\"numeric_token_2_l\" IS NULL AND \"numeric_token_2_r\" IS NULL",
                    "label_for_charts": "Null",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"numeric_token_2_l\" = \"numeric_token_2_r\"",
                    "label_for_charts": "Exact match",
                    "m_probability": 0.8,
                    "u_probability": 0.001,
                    "tf_adjustment_column": "numeric_token_2",
                    "tf_adjustment_weight": 1.0
                },
                {
                    "sql_condition": "\"numeric_token_1_l\" = \"numeric_token_2_r\"",
                    "label_for_charts": "Exact match inverted numbers",
                    "m_probability": 1,
                    "u_probability": 1
                },
                {
                    "sql_condition": "\"numeric_token_2_l\" IS NULL OR \"numeric_token_2_r\" IS NULL",
                    "label_for_charts": "Null",
                    "m_probability": 1,
                    "u_probability": 16
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 1,
                    "u_probability": 256
                }
            ],
            "comparison_description": "numeric_token_2"
        },
        {
            "output_column_name": "numeric_token_3",
            "comparison_levels": [
                {
                    "sql_condition": "\"numeric_token_3_l\" IS NULL AND \"numeric_token_3_r\" IS NULL",
                    "label_for_charts": "Null",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"numeric_token_3_l\" = \"numeric_token_3_r\"",
                    "label_for_charts": "Exact match",
                    "m_probability": 0.6,
                    "u_probability": 0.0001,
                    "tf_adjustment_column": "numeric_token_3",
                    "tf_adjustment_weight": 1.0
                },
                {
                    "sql_condition": "\"numeric_token_2_l\" = \"numeric_token_3_r\"",
                    "label_for_charts": "Exact match inverted",
                    "m_probability": 0.3,
                    "u_probability": 0.0025,
                    "tf_adjustment_column": "numeric_token_3",
                    "tf_adjustment_weight": 1.0
                },
                {
                    "sql_condition": "\"numeric_token_3_l\" IS NULL OR \"numeric_token_3_r\" IS NULL",
                    "label_for_charts": "Null",
                    "m_probability": 1,
                    "u_probability": 16
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 1,
                    "u_probability": 256
                }
            ],
            "comparison_description": "numeric_token_3"
        },
        {
            "output_column_name": "token_rel_freq_arr",
            "comparison_levels": [
                {
                    "sql_condition": "\"token_rel_freq_arr_l\" IS NULL OR \"token_rel_freq_arr_r\" IS NULL or length(\"token_rel_freq_arr_l\") = 0 or length(\"token_rel_freq_arr_r\") = 0",
                    "label_for_charts": "Null",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                token_rel_freq_arr_l,\n                x -> CASE\n                        WHEN array_contains(\n                            list_transform(token_rel_freq_arr_r, y -> y.tok),\n                            x.tok\n                        )\n                        THEN x.rel_freq\n                        ELSE 1.0\n                    END\n            )\n        ),\n        (p, q) -> p * q\n    )\n    *\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                list_concat(\n                    array_filter(\n                        token_rel_freq_arr_l,\n                        y -> NOT array_contains(\n                                list_transform(token_rel_freq_arr_r, x -> x.tok),\n                                y.tok\n                            )\n                    ),\n                    array_filter(\n                        token_rel_freq_arr_r,\n                        y -> NOT array_contains(\n                                list_transform(token_rel_freq_arr_l, x -> x.tok),\n                                y.tok\n                            )\n                    )\n                ),\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p / q^0.33\n    ) < 1e-20",
                    "label_for_charts": "<1e-20",
                    "m_probability": 8192,
                    "u_probability": 1
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                token_rel_freq_arr_l,\n                x -> CASE\n                        WHEN array_contains(\n                            list_transform(token_rel_freq_arr_r, y -> y.tok),\n                            x.tok\n                        )\n                        THEN x.rel_freq\n                        ELSE 1.0\n                    END\n            )\n        ),\n        (p, q) -> p * q\n    )\n    *\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                list_concat(\n                    array_filter(\n                        token_rel_freq_arr_l,\n                        y -> NOT array_contains(\n                                list_transform(token_rel_freq_arr_r, x -> x.tok),\n                                y.tok\n                            )\n                    ),\n                    array_filter(\n                        token_rel_freq_arr_r,\n                        y -> NOT array_contains(\n                                list_transform(token_rel_freq_arr_l, x -> x.tok),\n                                y.tok\n                            )\n                    )\n                ),\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p / q^0.33\n    ) < 1e-18",
                    "label_for_charts": "<1e-18",
                    "m_probability": 5792.618751480198,
                    "u_probability": 1
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                token_rel_freq_arr_l,\n                x -> CASE\n                        WHEN array_contains(\n                            list_transform(token_rel_freq_arr_r, y -> y.tok),\n                            x.tok\n                        )\n                        THEN x.rel_freq\n                        ELSE 1.0\n                    END\n            )\n        ),\n        (p, q) -> p * q\n    )\n    *\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                list_concat(\n                    array_filter(\n                        token_rel_freq_arr_l,\n                        y -> NOT array_contains(\n                                list_transform(token_rel_freq_arr_r, x -> x.tok),\n                                y.tok\n                            )\n                    ),\n                    array_filter(\n                        token_rel_freq_arr_r,\n                        y -> NOT array_contains(\n                                list_transform(token_rel_freq_arr_l, x -> x.tok),\n                                y.tok\n                            )\n                    )\n                ),\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p / q^0.33\n    ) < 1e-16",
                    "label_for_charts": "<1e-16",
                    "m_probability": 4096,
                    "u_probability": 1
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                token_rel_freq_arr_l,\n                x -> CASE\n                        WHEN array_contains(\n                            list_transform(token_rel_freq_arr_r, y -> y.tok),\n                            x.tok\n                        )\n                        THEN x.rel_freq\n                        ELSE 1.0\n                    END\n            )\n        ),\n        (p, q) -> p * q\n    )\n    *\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                list_concat(\n                    array_filter(\n                        token_rel_freq_arr_l,\n                        y -> NOT array_contains(\n                                list_transform(token_rel_freq_arr_r, x -> x.tok),\n                                y.tok\n                            )\n                    ),\n                    array_filter(\n                        token_rel_freq_arr_r,\n                        y -> NOT array_contains(\n                                list_transform(token_rel_freq_arr_l, x -> x.tok),\n                                y.tok\n                            )\n                    )\n                ),\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p / q^0.33\n    ) < 1e-14",
                    "label_for_charts": "<1e-14",
                    "m_probability": 2896.309375740099,
                    "u_probability": 1
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                token_rel_freq_arr_l,\n                x -> CASE\n                        WHEN array_contains(\n                            list_transform(token_rel_freq_arr_r, y -> y.tok),\n                            x.tok\n                        )\n                        THEN x.rel_freq\n                        ELSE 1.0\n                    END\n            )\n        ),\n        (p, q) -> p * q\n    )\n    *\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                list_concat(\n                    array_filter(\n                        token_rel_freq_arr_l,\n                        y -> NOT array_contains(\n                                list_transform(token_rel_freq_arr_r, x -> x.tok),\n                                y.tok\n                            )\n                    ),\n                    array_filter(\n                        token_rel_freq_arr_r,\n                        y -> NOT array_contains(\n                                list_transform(token_rel_freq_arr_l, x -> x.tok),\n                                y.tok\n                            )\n                    )\n                ),\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p / q^0.33\n    ) < 1e-12",
                    "label_for_charts": "<1e-12",
                    "m_probability": 2048,
                    "u_probability": 1
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                token_rel_freq_arr_l,\n                x -> CASE\n                        WHEN array_contains(\n                            list_transform(token_rel_freq_arr_r, y -> y.tok),\n                            x.tok\n                        )\n                        THEN x.rel_freq\n                        ELSE 1.0\n                    END\n            )\n        ),\n        (p, q) -> p * q\n    )\n    *\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                list_concat(\n                    array_filter(\n                        token_rel_freq_arr_l,\n                        y -> NOT array_contains(\n                                list_transform(token_rel_freq_arr_r, x -> x.tok),\n                                y.tok\n                            )\n                    ),\n                    array_filter(\n                        token_rel_freq_arr_r,\n                        y -> NOT array_contains(\n                                list_transform(token_rel_freq_arr_l, x -> x.tok),\n                                y.tok\n                            )\n                    )\n                ),\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p / q^0.33\n    ) < 1e-10",
                    "label_for_charts": "<1e-10",
                    "m_probability": 512,
                    "u_probability": 1
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                token_rel_freq_arr_l,\n                x -> CASE\n                        WHEN array_contains(\n                            list_transform(token_rel_freq_arr_r, y -> y.tok),\n                            x.tok\n                        )\n                        THEN x.rel_freq\n                        ELSE 1.0\n                    END\n            )\n        ),\n        (p, q) -> p * q\n    )\n    *\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                list_concat(\n                    array_filter(\n                        token_rel_freq_arr_l,\n                        y -> NOT array_contains(\n                                list_transform(token_rel_freq_arr_r, x -> x.tok),\n                                y.tok\n                            )\n                    ),\n                    array_filter(\n                        token_rel_freq_arr_r,\n                        y -> NOT array_contains(\n                                list_transform(token_rel_freq_arr_l, x -> x.tok),\n                                y.tok\n                            )\n                    )\n                ),\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p / q^0.33\n    ) < 1e-8",
                    "label_for_charts": "<1e-8",
                    "m_probability": 128,
                    "u_probability": 1
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                token_rel_freq_arr_l,\n                x -> CASE\n                        WHEN array_contains(\n                            list_transform(token_rel_freq_arr_r, y -> y.tok),\n                            x.tok\n                        )\n                        THEN x.rel_freq\n                        ELSE 1.0\n                    END\n            )\n        ),\n        (p, q) -> p * q\n    )\n    *\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                list_concat(\n                    array_filter(\n                        token_rel_freq_arr_l,\n                        y -> NOT array_contains(\n                                list_transform(token_rel_freq_arr_r, x -> x.tok),\n                                y.tok\n                            )\n                    ),\n                    array_filter(\n                        token_rel_freq_arr_r,\n                        y -> NOT array_contains(\n                                list_transform(token_rel_freq_arr_l, x -> x.tok),\n                                y.tok\n                            )\n                    )\n                ),\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p / q^0.33\n    ) < 1e-6",
                    "label_for_charts": "<1e-6",
                    "m_probability": 32,
                    "u_probability": 1
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                token_rel_freq_arr_l,\n                x -> CASE\n                        WHEN array_contains(\n                            list_transform(token_rel_freq_arr_r, y -> y.tok),\n                            x.tok\n                        )\n                        THEN x.rel_freq\n                        ELSE 1.0\n                    END\n            )\n        ),\n        (p, q) -> p * q\n    )\n    *\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                list_concat(\n                    array_filter(\n                        token_rel_freq_arr_l,\n                        y -> NOT array_contains(\n                                list_transform(token_rel_freq_arr_r, x -> x.tok),\n                                y.tok\n                            )\n                    ),\n                    array_filter(\n                        token_rel_freq_arr_r,\n                        y -> NOT array_contains(\n                                list_transform(token_rel_freq_arr_l, x -> x.tok),\n                                y.tok\n                            )\n                    )\n                ),\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p / q^0.33\n    ) < 1e-4",
                    "label_for_charts": "<1e-4",
                    "m_probability": 8,
                    "u_probability": 1
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                token_rel_freq_arr_l,\n                x -> CASE\n                        WHEN array_contains(\n                            list_transform(token_rel_freq_arr_r, y -> y.tok),\n                            x.tok\n                        )\n                        THEN x.rel_freq\n                        ELSE 1.0\n                    END\n            )\n        ),\n        (p, q) -> p * q\n    )\n    *\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                list_concat(\n                    array_filter(\n                        token_rel_freq_arr_l,\n                        y -> NOT array_contains(\n                                list_transform(token_rel_freq_arr_r, x -> x.tok),\n                                y.tok\n                            )\n                    ),\n                    array_filter(\n                        token_rel_freq_arr_r,\n                        y -> NOT array_contains(\n                                list_transform(token_rel_freq_arr_l, x -> x.tok),\n                                y.tok\n                            )\n                    )\n                ),\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p / q^0.33\n    ) < 1e-2",
                    "label_for_charts": "<1e-2",
                    "m_probability": 2,
                    "u_probability": 1
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 1,
                    "u_probability": 256
                }
            ],
            "comparison_description": "Token relative frequency array"
        },
        {
            "output_column_name": "common_end_tokens",
            "comparison_levels": [
                {
                    "sql_condition": "\"common_end_tokens_l\" IS NULL OR \"common_end_tokens_r\" IS NULL or length(\"common_end_tokens_l\") = 0 or length(\"common_end_tokens_r\") = 0",
                    "label_for_charts": "Null",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                common_end_tokens_l,\n                x -> CASE\n                        WHEN array_contains(\n                            list_transform(common_end_tokens_r, y -> y.tok),\n                            x.tok\n                        )\n                        THEN x.rel_freq\n                        ELSE 1.0\n                    END\n            )\n        ),\n        (p, q) -> p * q\n    ) < 1e-2",
                    "label_for_charts": "<1e-2",
                    "m_probability": 4,
                    "u_probability": 1
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 1,
                    "u_probability": 4
                }
            ],
            "comparison_description": "Array intersection"
        },
        {
            "output_column_name": "original_address_concat",
            "comparison_levels": [
                {
                    "sql_condition": "\"original_address_concat_l\" IS NULL OR \"original_address_concat_r\" IS NULL",
                    "label_for_charts": "Null",
                    "is_null_level": true
                },
                {
                    "sql_condition": "regexp_replace(regexp_replace(original_address_concat_l, '[[:punct:]]', '', 'g'), '\\s+', ' ', 'g') = regexp_replace(regexp_replace(original_address_concat_r, '[[:punct:]]', '', 'g'), '\\s+', ' ', 'g')",
                    "label_for_charts": "Exact match",
                    "m_probability": 3,
                    "u_probability": 1
                },
                {
                    "sql_condition": "levenshtein(original_address_concat_l, original_address_concat_r) < 3",
                    "label_for_charts": "Lev < 3",
                    "m_probability": 2.75,
                    "u_probability": 1
                },
                {
                    "sql_condition": "levenshtein(original_address_concat_l, original_address_concat_r) < 10",
                    "label_for_charts": "Lev < 10",
                    "m_probability": 2.5,
                    "u_probability": 1
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 1,
                    "u_probability": 4
                }
            ],
            "comparison_description": "numeric_token_3"
        },
        {
            "output_column_name": "postcode",
            "comparison_levels": [
                {
                    "sql_condition": "\"postcode_l\" IS NULL AND \"postcode_r\" IS NULL",
                    "label_for_charts": "Null",
                    "is_null_level": true
                },
                {
                    "sql_condition": "postcode_l = postcode_r",
                    "label_for_charts": "Exact",
                    "m_probability": 3e6,
                    "u_probability": 1
                },
                {
                    "sql_condition": "levenshtein(postcode_l, postcode_r) <= 1",
                    "label_for_charts": "Lev <= 1",
                    "m_probability": 1e6,
                    "u_probability": 1
                },
                {
                    "sql_condition": "levenshtein(postcode_l, postcode_r) <= 2",
                    "label_for_charts": "Lev <=2",
                    "m_probability": 0.5e6,
                    "u_probability": 1
                },
                {
                    "sql_condition": "split_part(postcode_l, ' ', 1) = split_part(postcode_r, ' ', 1)",
                    "label_for_charts": "District",
                    "m_probability": 3000,
                    "u_probability": 1
                },
                {
                    "sql_condition": "split_part(postcode_l, ' ', 2) = split_part(postcode_r, ' ', 2)",
                    "label_for_charts": "Unit not District",
                    "m_probability": 2000,
                    "u_probability": 1
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 1,
                    "u_probability": 64
                }
            ],
            "comparison_description": "numeric_token_1"
        }
    ],
    "retain_intermediate_calculation_columns": true,
    "retain_matching_columns": true,
    "source_dataset_column_name": "source_dataset",
    "sql_dialect": "duckdb",
    "linker_uid": "gzqi9i8c"
}